
-------------------------------------------------------------------------------------------------------------
                                            HBase
-------------------------------------------------------------------------------------------------------------

1)What is HBase
---------------
HBase is a distributed and column oriented NoSQL database. HBase uses HTables as a container, these tables
are then broken into column families where the data is actually inserted. The nature of columns families 
makes HBase efficient when reading data. HTables are broken into regions servers, each region server is
vertically divided into column families and these column families are then stored in HDFS files.

2)Architecture
--------------
Client library:

Master Server:
  -Assigns a region to Region Servers working together with Zookeeper
  -Responsible for load balancing, distributing the load between all the servers available
  -Responsible for schema changes in the creation of Hbase tables and column families
  -Interface for creating, deleting and updating tables

HBase region servers:
  -Manages regions, running on HDFS datanodes
  -In cases when tables go beyond configurable limit, HBase automatically split the table and distributes
   the load to other region server. --> Auto sharding 
  -Communicates with client handling data related operations 
  -Handles read/write requests for all regions

HBase regions:
  -HBase tables are divided horizontally into row-key range called regions
  -Regions are managed by region server
  -Tables that are split horizontally are the regions
  -Regions are assigned to a node in the cluster called the region server, holding upto 1000 regions

HBase MemStore:
  -Similar to a cache memory, when data gets writen in hbase, it will go first to the memstore
  -There is only one memstore per column family, when there is enough data, the entire data is transferred
   to HFiles in HDFS

HBase HFiles:
  -When the MemStore accumulates enough data, the entire key-value set is written into a new HFile in HDFS
  -Writting into HFile is sequential and fast

Zookeeper:
  -Zookeeper is used by HBase as a coordinator service to keep track of the state in the cluster
  -Tracks if servers are alive, available and if there are server failures 
  -Network partitions and client communication with regions through Zookeeper as an interface
  -Provides distributed synchronization

3)Types of filter
-----------------
Filters are used to get specific data from a HBase table
  -Column value filter
  -Column value comparators
  -KeyValue metadata filters
  -RowKey filters

4)HBase and RDBMS
-----------------
HBase does not have in-built authentication/permission mechanism. With one HMaster node there is a single
point of failure.

5)Writing into HBase
--------------------
The HBase client does not write directly into HFile, the client writes to WAL (Write Access Log) and then
is accessed by the Memstore which flushes the data into permanent memory from time to time.

6)Compaction in HBase
---------------------
As data is written to HBase, many HFiles get created as more and more data come through. Compaction is the
process of merging these HFiles to one file and discarding the old file.

  -Major compaction: All the HFiles of a column are merged and a single HFile is created and the 
  deleted HFiles are discarded and it is generally triggered manually.

  -Minor compaction: The adjacent small HFiles are merged to create a single HFile without removing 
  the deleted HFiles and the files chosen are randomly chosen.

7)Cell in HBase
---------------
It is the smallest unit of a HBase table which holds a piece of data in the form of a tuple.
{row, column, version}

















